# -*- coding: utf-8 -*-
"""Stock Trade.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y08Bj2hL1MAw0P_wBrdc5GSCm39ef5Yp
"""

pip install pandas yfinance openpyxl

import yfinance as yf
import pandas as pd
import mplfinance as mpf

# Function to backtest the 9.2 buying setup for a given stock
def backtest_9_2_setup_brazil(stock_code, entry_threshold=0.01):
    # Fetch stock data from the B3 exchange
    brazilian_stock_code = f"{stock_code}.SA"
    try:
        stock_data = yf.download(brazilian_stock_code, start="2022-01-01", end="2023-01-01")
    except Exception as e:
        print(f"Error fetching data for {stock_code}: {e}")
        return None

    # Calculate the Exponential Moving Average (EMA) with a 9-period window
    stock_data['EMA9'] = stock_data['Close'].ewm(span=9, adjust=False).mean()

    # Initialize variables to track the setup and trades
    in_trade = False
    entry_date = None

    setup_formed = 0
    setup_stopped = 0
    setup_completed = 0
    total_earnings = 0
    total_costs = 0
    trade_performance = []

    # Backtest the 9.2 buying setup
    for i in range(1, len(stock_data)):
        if not in_trade and stock_data['EMA9'][i] > stock_data['EMA9'][i - 1]:
            if stock_data['Close'][i] < stock_data['Low'][i - 1]:
                in_trade = True
                entry_date = stock_data.index[i]
                setup_formed += 1

        if in_trade:
            if stock_data['Close'][i] > stock_data['High'][i - 1]:
                in_trade = False
                setup_completed += 1
                exit_date = stock_data.index[i]
                entry_price = stock_data['Open'][stock_data.index.get_loc(entry_date)]
                exit_price = stock_data['Open'][stock_data.index.get_loc(exit_date)]
                trade_earnings = (exit_price - entry_price)
                trade_costs = entry_price
                total_earnings += trade_earnings
                total_costs += trade_costs
                trade_performance.append({
                    'Entry Date': entry_date,
                    'Exit Date': exit_date,
                    'Entry Price': entry_price,
                    'Exit Price': exit_price,
                    'Earnings': trade_earnings,
                    'Costs': trade_costs,
                })
            elif stock_data['EMA9'][i] < stock_data['EMA9'][i - 1]:
                in_trade = False
                setup_stopped += 1
                exit_date = stock_data.index[i]
                entry_price = stock_data['Open'][stock_data.index.get_loc(entry_date)]
                exit_price = stock_data['Open'][stock_data.index.get_loc(exit_date)]
                trade_earnings = (exit_price - entry_price)
                trade_costs = entry_price
                total_earnings += trade_earnings
                total_costs += trade_costs
                trade_performance.append({
                    'Entry Date': entry_date,
                    'Exit Date': exit_date,
                    'Entry Price': entry_price,
                    'Exit Price': exit_price,
                    'Earnings': trade_earnings,
                    'Costs': trade_costs,
                })

    return {
        'Setup Formed': setup_formed,
        'Setup Stopped': setup_stopped,
        'Setup Completed': setup_completed,
        'Total Earnings': total_earnings,
        'Total Costs': total_costs,
        'Trade Performance': trade_performance,
        'Stock Data': stock_data
    }

if __name__ == "__main__":
    stock_code = input("Digite o código da ação brasileira: ")

    setup_results = backtest_9_2_setup_brazil(stock_code)

    if setup_results:
        print(f"Resultados do Setup 9.2 para a Ação {stock_code}:")
        print(f"Setup Formed: {setup_results['Setup Formed']}")
        print(f"Setup Stopped: {setup_results['Setup Stopped']}")
        print(f"Setup Completed: {setup_results['Setup Completed']}")
        print(f"Total Earnings: R${setup_results['Total Earnings']:.2f}")
        print(f"Total Costs: R${setup_results['Total Costs']:.2f}")

        # Print trade performance details
        print("\nDetalhes do Desempenho das Negociações:")
        for i, trade in enumerate(setup_results['Trade Performance']):
            print(f"Negociação {i + 1} - Data de Entrada: {trade['Entry Date']}, Data de Saída: {trade['Exit Date']}")
            print(f"Preço de Entrada: R${trade['Entry Price']:.2f}, Preço de Saída: R${trade['Exit Price']:.2f}")
            print(f"Lucro: R${trade['Earnings']:.2f}, Custo: R${trade['Costs']:.2f}")
            print()

            # Add candlestick chart for each trade
            entry_index = setup_results['Stock Data'].index.get_loc(trade['Entry Date'])
            exit_index = setup_results['Stock Data'].index.get_loc(trade['Exit Date'])
            start_index = max(0, entry_index - 3)
            end_index = min(len(setup_results['Stock Data']) - 1, exit_index + 3)
            trade_data = setup_results['Stock Data'].iloc[start_index:end_index]

            mpf.plot(trade_data, type='candle', style='charles', title=f'Candlestick Chart for Trade {i + 1}')
            print()
    else:
        print("Nenhum resultado encontrado.")